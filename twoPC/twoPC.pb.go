// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.29.1
// source: twoPC/twoPC.proto

package twoPC

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerID      int64                  `protobuf:"varint,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	ReceiverSeq   int64                  `protobuf:"varint,2,opt,name=receiverSeq,proto3" json:"receiverSeq,omitempty"`
	SenderSeq     int64                  `protobuf:"varint,3,opt,name=senderSeq,proto3" json:"senderSeq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_twoPC_twoPC_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{0}
}

func (x *Ack) GetServerID() int64 {
	if x != nil {
		return x.ServerID
	}
	return 0
}

func (x *Ack) GetReceiverSeq() int64 {
	if x != nil {
		return x.ReceiverSeq
	}
	return 0
}

func (x *Ack) GetSenderSeq() int64 {
	if x != nil {
		return x.SenderSeq
	}
	return 0
}

type TwoPCPrepare struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderID      int64                  `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	Req           *TxRequest             `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	CommitMsgs    []*Commit              `protobuf:"bytes,3,rep,name=commitMsgs,proto3" json:"commitMsgs,omitempty"`
	SenderSeq     int64                  `protobuf:"varint,4,opt,name=senderSeq,proto3" json:"senderSeq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TwoPCPrepare) Reset() {
	*x = TwoPCPrepare{}
	mi := &file_twoPC_twoPC_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TwoPCPrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoPCPrepare) ProtoMessage() {}

func (x *TwoPCPrepare) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoPCPrepare.ProtoReflect.Descriptor instead.
func (*TwoPCPrepare) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{1}
}

func (x *TwoPCPrepare) GetSenderID() int64 {
	if x != nil {
		return x.SenderID
	}
	return 0
}

func (x *TwoPCPrepare) GetReq() *TxRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *TwoPCPrepare) GetCommitMsgs() []*Commit {
	if x != nil {
		return x.CommitMsgs
	}
	return nil
}

func (x *TwoPCPrepare) GetSenderSeq() int64 {
	if x != nil {
		return x.SenderSeq
	}
	return 0
}

type TwoPCCommit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SenderID      int64                  `protobuf:"varint,1,opt,name=senderID,proto3" json:"senderID,omitempty"`
	Req           *TxRequest             `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	Outcome       string                 `protobuf:"bytes,3,opt,name=outcome,proto3" json:"outcome,omitempty"`
	SenderSeq     int64                  `protobuf:"varint,4,opt,name=senderSeq,proto3" json:"senderSeq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TwoPCCommit) Reset() {
	*x = TwoPCCommit{}
	mi := &file_twoPC_twoPC_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TwoPCCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwoPCCommit) ProtoMessage() {}

func (x *TwoPCCommit) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TwoPCCommit.ProtoReflect.Descriptor instead.
func (*TwoPCCommit) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{2}
}

func (x *TwoPCCommit) GetSenderID() int64 {
	if x != nil {
		return x.SenderID
	}
	return 0
}

func (x *TwoPCCommit) GetReq() *TxRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *TwoPCCommit) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *TwoPCCommit) GetSenderSeq() int64 {
	if x != nil {
		return x.SenderSeq
	}
	return 0
}

type Reply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	View          int64                  `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ClientID      string                 `protobuf:"bytes,3,opt,name=clientID,proto3" json:"clientID,omitempty"`
	ReplicaID     int64                  `protobuf:"varint,4,opt,name=replicaID,proto3" json:"replicaID,omitempty"`
	Result        string                 `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	Signature     []byte                 `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reply) Reset() {
	*x = Reply{}
	mi := &file_twoPC_twoPC_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{3}
}

func (x *Reply) GetView() int64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *Reply) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Reply) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *Reply) GetReplicaID() int64 {
	if x != nil {
		return x.ReplicaID
	}
	return 0
}

func (x *Reply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Reply) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Just in case we need anything to return null
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_twoPC_twoPC_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{4}
}

type Liveness struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Live          bool                   `protobuf:"varint,1,opt,name=live,proto3" json:"live,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Liveness) Reset() {
	*x = Liveness{}
	mi := &file_twoPC_twoPC_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Liveness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Liveness) ProtoMessage() {}

func (x *Liveness) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Liveness.ProtoReflect.Descriptor instead.
func (*Liveness) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{5}
}

func (x *Liveness) GetLive() bool {
	if x != nil {
		return x.Live
	}
	return false
}

type Byzantine struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Byzantine     bool                   `protobuf:"varint,1,opt,name=byzantine,proto3" json:"byzantine,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Byzantine) Reset() {
	*x = Byzantine{}
	mi := &file_twoPC_twoPC_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Byzantine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Byzantine) ProtoMessage() {}

func (x *Byzantine) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Byzantine.ProtoReflect.Descriptor instead.
func (*Byzantine) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{6}
}

func (x *Byzantine) GetByzantine() bool {
	if x != nil {
		return x.Byzantine
	}
	return false
}

type BalanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientID      string                 `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceRequest) Reset() {
	*x = BalanceRequest{}
	mi := &file_twoPC_twoPC_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceRequest) ProtoMessage() {}

func (x *BalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceRequest.ProtoReflect.Descriptor instead.
func (*BalanceRequest) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{7}
}

func (x *BalanceRequest) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

// For Print functions
type ServerRequested struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerID      string                 `protobuf:"bytes,1,opt,name=serverID,proto3" json:"serverID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerRequested) Reset() {
	*x = ServerRequested{}
	mi := &file_twoPC_twoPC_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerRequested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerRequested) ProtoMessage() {}

func (x *ServerRequested) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerRequested.ProtoReflect.Descriptor instead.
func (*ServerRequested) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{8}
}

func (x *ServerRequested) GetServerID() string {
	if x != nil {
		return x.ServerID
	}
	return ""
}

// For Print function responses
type BalanceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Balance       string                 `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceResponse) Reset() {
	*x = BalanceResponse{}
	mi := &file_twoPC_twoPC_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceResponse) ProtoMessage() {}

func (x *BalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceResponse.ProtoReflect.Descriptor instead.
func (*BalanceResponse) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{9}
}

func (x *BalanceResponse) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type DSEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seq           int64                  `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Tx            *Transaction           `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DSEntry) Reset() {
	*x = DSEntry{}
	mi := &file_twoPC_twoPC_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DSEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSEntry) ProtoMessage() {}

func (x *DSEntry) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSEntry.ProtoReflect.Descriptor instead.
func (*DSEntry) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{10}
}

func (x *DSEntry) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *DSEntry) GetTx() *Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *DSEntry) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DSResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DS            []*DSEntry             `protobuf:"bytes,1,rep,name=DS,proto3" json:"DS,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DSResponse) Reset() {
	*x = DSResponse{}
	mi := &file_twoPC_twoPC_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSResponse) ProtoMessage() {}

func (x *DSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSResponse.ProtoReflect.Descriptor instead.
func (*DSResponse) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{11}
}

func (x *DSResponse) GetDS() []*DSEntry {
	if x != nil {
		return x.DS
	}
	return nil
}

type PrePrepare struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	View          int64                  `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Seq           int64                  `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Request       *TxRequest             `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	Signature     []byte                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	TwoPCState    string                 `protobuf:"bytes,5,opt,name=twoPCState,proto3" json:"twoPCState,omitempty"`
	Who           string                 `protobuf:"bytes,6,opt,name=who,proto3" json:"who,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrePrepare) Reset() {
	*x = PrePrepare{}
	mi := &file_twoPC_twoPC_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrePrepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrePrepare) ProtoMessage() {}

func (x *PrePrepare) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrePrepare.ProtoReflect.Descriptor instead.
func (*PrePrepare) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{12}
}

func (x *PrePrepare) GetView() int64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *PrePrepare) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *PrePrepare) GetRequest() *TxRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *PrePrepare) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *PrePrepare) GetTwoPCState() string {
	if x != nil {
		return x.TwoPCState
	}
	return ""
}

func (x *PrePrepare) GetWho() string {
	if x != nil {
		return x.Who
	}
	return ""
}

type Prepare struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	View          int64                  `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Seq           int64                  `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Digest        []byte                 `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	ReplicaID     int64                  `protobuf:"varint,4,opt,name=replicaID,proto3" json:"replicaID,omitempty"`
	Signature     []byte                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	TwoPCState    string                 `protobuf:"bytes,6,opt,name=twoPCState,proto3" json:"twoPCState,omitempty"`
	Who           string                 `protobuf:"bytes,7,opt,name=who,proto3" json:"who,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Prepare) Reset() {
	*x = Prepare{}
	mi := &file_twoPC_twoPC_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Prepare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prepare) ProtoMessage() {}

func (x *Prepare) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prepare.ProtoReflect.Descriptor instead.
func (*Prepare) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{13}
}

func (x *Prepare) GetView() int64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *Prepare) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Prepare) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *Prepare) GetReplicaID() int64 {
	if x != nil {
		return x.ReplicaID
	}
	return 0
}

func (x *Prepare) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Prepare) GetTwoPCState() string {
	if x != nil {
		return x.TwoPCState
	}
	return ""
}

func (x *Prepare) GetWho() string {
	if x != nil {
		return x.Who
	}
	return ""
}

type Commit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	View          int64                  `protobuf:"varint,1,opt,name=view,proto3" json:"view,omitempty"`
	Seq           int64                  `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	Digest        []byte                 `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	ReplicaID     int64                  `protobuf:"varint,4,opt,name=replicaID,proto3" json:"replicaID,omitempty"`
	Signature     []byte                 `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	TwoPCState    string                 `protobuf:"bytes,6,opt,name=twoPCState,proto3" json:"twoPCState,omitempty"`
	Who           string                 `protobuf:"bytes,7,opt,name=who,proto3" json:"who,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Commit) Reset() {
	*x = Commit{}
	mi := &file_twoPC_twoPC_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{14}
}

func (x *Commit) GetView() int64 {
	if x != nil {
		return x.View
	}
	return 0
}

func (x *Commit) GetSeq() int64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Commit) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *Commit) GetReplicaID() int64 {
	if x != nil {
		return x.ReplicaID
	}
	return 0
}

func (x *Commit) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *Commit) GetTwoPCState() string {
	if x != nil {
		return x.TwoPCState
	}
	return ""
}

func (x *Commit) GetWho() string {
	if x != nil {
		return x.Who
	}
	return ""
}

type PrepareRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            *Transaction           `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	TxID          int32                  `protobuf:"varint,2,opt,name=TxID,proto3" json:"TxID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareRequest) Reset() {
	*x = PrepareRequest{}
	mi := &file_twoPC_twoPC_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareRequest) ProtoMessage() {}

func (x *PrepareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareRequest.ProtoReflect.Descriptor instead.
func (*PrepareRequest) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{15}
}

func (x *PrepareRequest) GetTx() *Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *PrepareRequest) GetTxID() int32 {
	if x != nil {
		return x.TxID
	}
	return 0
}

type PrepareResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prepared      bool                   `protobuf:"varint,1,opt,name=Prepared,proto3" json:"Prepared,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareResponse) Reset() {
	*x = PrepareResponse{}
	mi := &file_twoPC_twoPC_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareResponse) ProtoMessage() {}

func (x *PrepareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareResponse.ProtoReflect.Descriptor instead.
func (*PrepareResponse) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{16}
}

func (x *PrepareResponse) GetPrepared() bool {
	if x != nil {
		return x.Prepared
	}
	return false
}

type CommitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            *Transaction           `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	TxID          int32                  `protobuf:"varint,2,opt,name=TxID,proto3" json:"TxID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	mi := &file_twoPC_twoPC_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{17}
}

func (x *CommitRequest) GetTx() *Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *CommitRequest) GetTxID() int32 {
	if x != nil {
		return x.TxID
	}
	return 0
}

type CommitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Committed     bool                   `protobuf:"varint,1,opt,name=Committed,proto3" json:"Committed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	mi := &file_twoPC_twoPC_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{18}
}

func (x *CommitResponse) GetCommitted() bool {
	if x != nil {
		return x.Committed
	}
	return false
}

type AbortRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            *Transaction           `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	TxID          int32                  `protobuf:"varint,2,opt,name=TxID,proto3" json:"TxID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbortRequest) Reset() {
	*x = AbortRequest{}
	mi := &file_twoPC_twoPC_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbortRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortRequest) ProtoMessage() {}

func (x *AbortRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortRequest.ProtoReflect.Descriptor instead.
func (*AbortRequest) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{19}
}

func (x *AbortRequest) GetTx() *Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *AbortRequest) GetTxID() int32 {
	if x != nil {
		return x.TxID
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	S             string                 `protobuf:"bytes,1,opt,name=S,proto3" json:"S,omitempty"`
	R             string                 `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
	Amt           string                 `protobuf:"bytes,3,opt,name=Amt,proto3" json:"Amt,omitempty"`
	Seq           string                 `protobuf:"bytes,4,opt,name=Seq,proto3" json:"Seq,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_twoPC_twoPC_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{20}
}

func (x *Transaction) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *Transaction) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *Transaction) GetAmt() string {
	if x != nil {
		return x.Amt
	}
	return ""
}

func (x *Transaction) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

type TxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tx            *Transaction           `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature     []byte                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TxRequest) Reset() {
	*x = TxRequest{}
	mi := &file_twoPC_twoPC_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxRequest) ProtoMessage() {}

func (x *TxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_twoPC_twoPC_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxRequest.ProtoReflect.Descriptor instead.
func (*TxRequest) Descriptor() ([]byte, []int) {
	return file_twoPC_twoPC_proto_rawDescGZIP(), []int{21}
}

func (x *TxRequest) GetTx() *Transaction {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *TxRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TxRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_twoPC_twoPC_proto protoreflect.FileDescriptor

var file_twoPC_twoPC_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2f, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x22, 0x61, 0x0a, 0x03, 0x41, 0x63,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x22, 0x9b, 0x01,
	0x0a, 0x0c, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x03, 0x72, 0x65,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x2d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x65, 0x71, 0x22, 0x85, 0x01, 0x0a, 0x0b,
	0x74, 0x77, 0x6f, 0x50, 0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x54, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x71, 0x22, 0xa9, 0x01, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22,
	0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x0a, 0x08, 0x4c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x29, 0x0a, 0x09, 0x42, 0x79, 0x7a, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x22, 0x2c, 0x0a, 0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x22, 0x2d, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x2b, 0x0a, 0x0f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x57, 0x0a,
	0x07, 0x44, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x02, 0x74, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x44, 0x53, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x44, 0x53, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x44, 0x53, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x02, 0x44, 0x53, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x77, 0x6f,
	0x50, 0x43, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x77, 0x68, 0x6f, 0x22, 0xb5, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x77, 0x6f, 0x50, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x77,
	0x68, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x22, 0xb4, 0x01,
	0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x77, 0x68, 0x6f, 0x22, 0x48, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x22, 0x2d,
	0x0a, 0x0f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x22, 0x47, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x77, 0x6f,
	0x50, 0x43, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02,
	0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0x46, 0x0a, 0x0c, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x78, 0x49, 0x44, 0x22, 0x4d,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a,
	0x01, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x53, 0x12, 0x0c, 0x0a, 0x01, 0x52,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6d, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x41, 0x6d, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x53,
	0x65, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x65, 0x71, 0x22, 0x6b, 0x0a,
	0x09, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x74, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x74, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x32, 0x84, 0x06, 0x0a, 0x05, 0x74,
	0x77, 0x6f, 0x50, 0x43, 0x12, 0x31, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x0c, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x42, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x2e, 0x74, 0x77, 0x6f,
	0x50, 0x43, 0x2e, 0x42, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x1a, 0x0c, 0x2e, 0x74,
	0x77, 0x6f, 0x50, 0x43, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x12,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x53, 0x12, 0x16, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x1a, 0x11, 0x2e, 0x74,
	0x77, 0x6f, 0x50, 0x43, 0x2e, 0x44, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x11, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x50,
	0x72, 0x65, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x1a, 0x0e, 0x2e, 0x74, 0x77, 0x6f, 0x50,
	0x43, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x0e, 0x2e,
	0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x1a, 0x0d, 0x2e,
	0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0x00, 0x12, 0x2e,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x0d, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x1a, 0x0c,
	0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2d,
	0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x0c, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x1a, 0x0c, 0x2e,
	0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x12, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x12, 0x10, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x54, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x12, 0x13, 0x2e, 0x74, 0x77,
	0x6f, 0x50, 0x43, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x1a, 0x0c, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x11, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x13, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x74, 0x77,
	0x6f, 0x50, 0x43, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x1a, 0x0c, 0x2e, 0x74, 0x77, 0x6f,
	0x50, 0x43, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x11, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x12, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x1a, 0x0c, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x41, 0x63, 0x6b, 0x12, 0x0a, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x41, 0x63,
	0x6b, 0x1a, 0x0c, 0x2e, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x74, 0x77, 0x6f, 0x50, 0x43, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_twoPC_twoPC_proto_rawDescOnce sync.Once
	file_twoPC_twoPC_proto_rawDescData = file_twoPC_twoPC_proto_rawDesc
)

func file_twoPC_twoPC_proto_rawDescGZIP() []byte {
	file_twoPC_twoPC_proto_rawDescOnce.Do(func() {
		file_twoPC_twoPC_proto_rawDescData = protoimpl.X.CompressGZIP(file_twoPC_twoPC_proto_rawDescData)
	})
	return file_twoPC_twoPC_proto_rawDescData
}

var file_twoPC_twoPC_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_twoPC_twoPC_proto_goTypes = []any{
	(*Ack)(nil),             // 0: twoPC.Ack
	(*TwoPCPrepare)(nil),    // 1: twoPC.twoPCPrepare
	(*TwoPCCommit)(nil),     // 2: twoPC.twoPCCommit
	(*Reply)(nil),           // 3: twoPC.Reply
	(*Empty)(nil),           // 4: twoPC.Empty
	(*Liveness)(nil),        // 5: twoPC.Liveness
	(*Byzantine)(nil),       // 6: twoPC.Byzantine
	(*BalanceRequest)(nil),  // 7: twoPC.BalanceRequest
	(*ServerRequested)(nil), // 8: twoPC.ServerRequested
	(*BalanceResponse)(nil), // 9: twoPC.BalanceResponse
	(*DSEntry)(nil),         // 10: twoPC.DSEntry
	(*DSResponse)(nil),      // 11: twoPC.DSResponse
	(*PrePrepare)(nil),      // 12: twoPC.PrePrepare
	(*Prepare)(nil),         // 13: twoPC.Prepare
	(*Commit)(nil),          // 14: twoPC.Commit
	(*PrepareRequest)(nil),  // 15: twoPC.PrepareRequest
	(*PrepareResponse)(nil), // 16: twoPC.PrepareResponse
	(*CommitRequest)(nil),   // 17: twoPC.CommitRequest
	(*CommitResponse)(nil),  // 18: twoPC.CommitResponse
	(*AbortRequest)(nil),    // 19: twoPC.AbortRequest
	(*Transaction)(nil),     // 20: twoPC.Transaction
	(*TxRequest)(nil),       // 21: twoPC.TxRequest
}
var file_twoPC_twoPC_proto_depIdxs = []int32{
	21, // 0: twoPC.twoPCPrepare.req:type_name -> twoPC.TxRequest
	14, // 1: twoPC.twoPCPrepare.commitMsgs:type_name -> twoPC.Commit
	21, // 2: twoPC.twoPCCommit.req:type_name -> twoPC.TxRequest
	20, // 3: twoPC.DSEntry.tx:type_name -> twoPC.Transaction
	10, // 4: twoPC.DSResponse.DS:type_name -> twoPC.DSEntry
	21, // 5: twoPC.PrePrepare.request:type_name -> twoPC.TxRequest
	20, // 6: twoPC.PrepareRequest.Tx:type_name -> twoPC.Transaction
	20, // 7: twoPC.CommitRequest.Tx:type_name -> twoPC.Transaction
	20, // 8: twoPC.AbortRequest.Tx:type_name -> twoPC.Transaction
	20, // 9: twoPC.TxRequest.tx:type_name -> twoPC.Transaction
	5,  // 10: twoPC.twoPC.NotifyLiveness:input_type -> twoPC.Liveness
	6,  // 11: twoPC.twoPC.NotifyByzantine:input_type -> twoPC.Byzantine
	21, // 12: twoPC.twoPC.RequestTransaction:input_type -> twoPC.TxRequest
	7,  // 13: twoPC.twoPC.RequestBalance:input_type -> twoPC.BalanceRequest
	8,  // 14: twoPC.twoPC.RequestDS:input_type -> twoPC.ServerRequested
	12, // 15: twoPC.twoPC.ProcessPrePrepare:input_type -> twoPC.PrePrepare
	13, // 16: twoPC.twoPC.ProcessPrepare:input_type -> twoPC.Prepare
	14, // 17: twoPC.twoPC.ProcessCommit:input_type -> twoPC.Commit
	3,  // 18: twoPC.twoPC.ReplyToClient:input_type -> twoPC.Reply
	21, // 19: twoPC.twoPC.CoordinatorPrepare:input_type -> twoPC.TxRequest
	1,  // 20: twoPC.twoPC.ParticipantPrepare:input_type -> twoPC.twoPCPrepare
	1,  // 21: twoPC.twoPC.CoordinatorCommit:input_type -> twoPC.twoPCPrepare
	2,  // 22: twoPC.twoPC.ParticipantCommit:input_type -> twoPC.twoPCCommit
	0,  // 23: twoPC.twoPC.CoordinatorAck:input_type -> twoPC.Ack
	4,  // 24: twoPC.twoPC.NotifyLiveness:output_type -> twoPC.Empty
	4,  // 25: twoPC.twoPC.NotifyByzantine:output_type -> twoPC.Empty
	4,  // 26: twoPC.twoPC.RequestTransaction:output_type -> twoPC.Empty
	9,  // 27: twoPC.twoPC.RequestBalance:output_type -> twoPC.BalanceResponse
	11, // 28: twoPC.twoPC.RequestDS:output_type -> twoPC.DSResponse
	13, // 29: twoPC.twoPC.ProcessPrePrepare:output_type -> twoPC.Prepare
	14, // 30: twoPC.twoPC.ProcessPrepare:output_type -> twoPC.Commit
	4,  // 31: twoPC.twoPC.ProcessCommit:output_type -> twoPC.Empty
	4,  // 32: twoPC.twoPC.ReplyToClient:output_type -> twoPC.Empty
	4,  // 33: twoPC.twoPC.CoordinatorPrepare:output_type -> twoPC.Empty
	4,  // 34: twoPC.twoPC.ParticipantPrepare:output_type -> twoPC.Empty
	4,  // 35: twoPC.twoPC.CoordinatorCommit:output_type -> twoPC.Empty
	4,  // 36: twoPC.twoPC.ParticipantCommit:output_type -> twoPC.Empty
	4,  // 37: twoPC.twoPC.CoordinatorAck:output_type -> twoPC.Empty
	24, // [24:38] is the sub-list for method output_type
	10, // [10:24] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_twoPC_twoPC_proto_init() }
func file_twoPC_twoPC_proto_init() {
	if File_twoPC_twoPC_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_twoPC_twoPC_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_twoPC_twoPC_proto_goTypes,
		DependencyIndexes: file_twoPC_twoPC_proto_depIdxs,
		MessageInfos:      file_twoPC_twoPC_proto_msgTypes,
	}.Build()
	File_twoPC_twoPC_proto = out.File
	file_twoPC_twoPC_proto_rawDesc = nil
	file_twoPC_twoPC_proto_goTypes = nil
	file_twoPC_twoPC_proto_depIdxs = nil
}
